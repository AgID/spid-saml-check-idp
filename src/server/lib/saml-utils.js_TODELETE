const samlProtocol = require("./saml-protocol/protocol-bindings");
const errors = require("./saml-protocol/errors");
const namespaces = require("./saml-protocol/namespaces");
const saml = require("./saml-protocol");
const xmldom = require("xmldom");
const xpath = require("xpath");
const DOMParser = xmldom.DOMParser;
const zlib = require("zlib");
const path = require("path");
const fs = require("fs");

const select = xpath.useNamespaces({
    ...namespaces, 
    "spid": "https://spid.gov.it/saml-extensions"
}); 






class PayloadDecoder {

    static decode(payload) {
        let xml = samlProtocol.decodeXMLPayload(payload);
        return xml;
    }
}










// TODO
class ResponseParser {

    constructor(xml) {
        let isAuthnRequest = false;
        let isLogout = false;

        let doc = new DOMParser().parseFromString(xml);
        if(select("//samlp:AuthnRequest", doc).length>0) isAuthnRequest = true;
        if(select("//samlp:LogoutRequest", doc).length>0) isLogout = true

        let type = 0;   // 0: unknown, 1: AuthnRequest, 2: Logout

        if(isAuthnRequest) type = 1;
        else if(isLogout) type = 2;

        this.request = {
            xml: xml,
            type: type
        }
    }

    isAuthnRequest() { return (this.request.type==1)? true : false; }
    isLogoutRequest() { return (this.request.type==2)? true : false; }

    ID() {
        let samlp = (this.request.type==1)? "AuthnRequest" : "LogoutRequest";
        let doc = new DOMParser().parseFromString(this.request.xml);
        let requestID = select("//samlp:" + samlp, doc)[0];
        if(requestID!=null) requestID = requestID.getAttribute("ID") 
        else requestID = undefined;
        return requestID;
    }

    IssueInstant() {
        let samlp = (this.request.type==1)? "AuthnRequest" : "LogoutRequest";
        let doc = new DOMParser().parseFromString(this.request.xml);
        let requestIssueInstant = select("//samlp:" + samlp, doc)[0];
        if(requestIssueInstant!=null) requestIssueInstant = requestIssueInstant.getAttribute("IssueInstant") 
        else requestIssueInstant = undefined;
        return requestIssueInstant;
    }

    Issuer() {
        let samlp = (this.request.type==1)? "AuthnRequest" : "LogoutRequest";
        let doc = new DOMParser().parseFromString(this.request.xml);
        let issuer = select("string(//samlp:" + samlp + "/saml:Issuer)", doc);
        return issuer.trim();
    }

    AuthnContextClassRef() { // only for type 1
        let doc = new DOMParser().parseFromString(this.request.xml);
        let requestAuthnContextClassRef = select("string(//samlp:AuthnRequest/samlp:RequestedAuthnContext/saml:AuthnContextClassRef)", doc);
        return requestAuthnContextClassRef;
    }

    AssertionConsumerServiceURL() { // only for type 1
        let doc = new DOMParser().parseFromString(this.request.xml);
        let requestAssertionConsumerServiceURL = select("//samlp:AuthnRequest", doc)[0];
        if(requestAssertionConsumerServiceURL!=null) requestAssertionConsumerServiceURL = requestAssertionConsumerServiceURL.getAttribute("AssertionConsumerServiceURL") 
        else requestAssertionConsumerServiceURL = undefined;
        return requestAssertionConsumerServiceURL;
    }

    AssertionConsumerServiceIndex() { // only for type 1
        let doc = new DOMParser().parseFromString(this.request.xml);
        let requestAssertionConsumerServiceIndex = select("//samlp:AuthnRequest", doc)[0];
        if(requestAssertionConsumerServiceIndex!=null) requestAssertionConsumerServiceIndex = requestAssertionConsumerServiceIndex.getAttribute("AssertionConsumerServiceIndex") 
        else requestAssertionConsumerServiceIndex = undefined;
        return requestAssertionConsumerServiceIndex;
    }

    AttributeConsumingServiceIndex() { // only for type 1
        let doc = new DOMParser().parseFromString(this.request.xml);
        let requestAttributeConsumingServiceIndex = select("//samlp:AuthnRequest", doc)[0];
        if(requestAttributeConsumingServiceIndex!=null) requestAttributeConsumingServiceIndex = requestAttributeConsumingServiceIndex.getAttribute("AttributeConsumingServiceIndex") 
        else requestAttributeConsumingServiceIndex = undefined;
        return requestAttributeConsumingServiceIndex;
    }

    Purpose() { // only for type 1
        let doc = new DOMParser().parseFromString(this.request.xml);
        let purpose = select("string(//samlp:AuthnRequest/samlp:Extensions/spid:Purpose)", doc);
        return purpose;
    }

    MinAge() { // only for type 1
        let doc = new DOMParser().parseFromString(this.request.xml);
        let minAge = select("string(//samlp:AuthnRequest/samlp:Extensions/spid:AgeLimit/spid:MinAge)", doc);
        return minAge;
    }

    MaxAge() { // only for type 1
        let doc = new DOMParser().parseFromString(this.request.xml);
        let maxAge = select("string(//samlp:AuthnRequest/samlp:Extensions/spid:AgeLimit/spid:MaxAge)", doc);
        return maxAge;
    }
}

class SPModel { 

}


class SP {
    constructor(spConfig) {
        this.sp = new saml.ServiceProvider(spConfig, new SPModel());
    }
    
    getMetadata() {
        return this.sp.produceSPMetadata(true);
    }
}


module.exports.ResponseParser = ResponseParser;
module.exports.PayloadDecoder = PayloadDecoder;
module.exports.SP = SP;
